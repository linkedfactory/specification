openapi: 3.0.1
info:
  title: LinkedFactory
  description: LinkedFactory is a set of APIs for combining RDF and time series data to create digital representations of technical systems.
  version: 0.0.1
servers:
  - url: https://linkedfactory.github.io/
tags:
  - name: end user
paths: 
  /values:
    get:
      tags: 
        - end user
      summary: Query time series data for certain items
      parameters:
        - in: query
          name: item
          schema:
            type: string
          description: The subject of the time series data.
          required: true
          example: http://example.org/resource1
        - in: query
          name: items
          schema:
            type: string
          description: Alternative for item if data of multiple items should be returned.
          example: http://example.org/resource1 http://example.org/resource2
        - in: query
          name: property
          schema:
            type: string
          description: A certain property whose values should be returned.
          example: http://example.org/property1
        - in: query
          name: properties
          schema:
            type: string
          description: Alternative for property if data of multiple properties should be returned.
          example: http://example.org/property1 http://example.org/property2
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit for the number of returned data points per property.
        - in: query
          name: from
          schema:
            type: integer
          description: Unix timestamp (ms) for start of query window
        - in: query
          name: to
          schema:
            type: integer
          description: Unix timestamp (ms) for end of query window
        - in: query
          name: op
          schema:
            type: string
            enum:
              - min
              - max
              - avg
              - sum
          description: Aggregation operator for values within a certain interval.
        - in: query
          name: interval
          schema:
            type: integer
          description: Interval in which the aggregation operator op summarizes the values.
      operationId: getValues
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  http://example.org/linkedfactory/evolopro/IR6640-Robot/Axes/A2/ParameterSet/ActualPosition:
                    value:
                    - time: 1600764274637
                      value: 74.9
                    - time: 1600764274135
                      value: 77.4
                    - time: 1600764273607
                      value: 80.9
                    - time: 1600764273089
                      value: 81.3
    post:
      tags: 
        - end user
      summary: Ingest time series data
      parameters:
        - in: query
          name: model
          required: true
          schema:
            type: string

      requestBody:
        description: The data in LF JSON format.
        content:
          application/json:
            schema:
              type: object
              example: 
                evolopro/umati/BasicRobot/ParameterSet/SpeedOverride:
                  value:
                  - value: 1.7
                    time: 1614259546690
          application/influxdb-line:
            schema:
              type: string

      responses:
        '200':
            description: OK

  /properties:
    get:
      tags:
        - end user
      summary: Query the known properties of an item.
      parameters:
        - in: query
          name: item
          schema:
            type: string
          description: The item for which the properties should be returned.
          required: true
          example: http://example.org/resource1

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example:
                  - "@id": http://example.org/properties/p1
                  - "@id": http://example.org/properties/p2

  /sparql:
    get:
      tags:
        - end user
      summary: Execute a SPARQL query.
      parameters:
        - in: query
          name: model
          schema:
            type: string
          description: Model (named graph) within the LF instance that shall be queried.
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: The SPARQL query.
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /models:
    post:
      summary: Allows to make changes to the semantic structure of the model
      tags:
        - end user
      parameters:
        - in: query
          name: model
          schema:
            type: string
            default: http%3A%2F%2Flocalhost%3A10080%2Flinkedfactory
          description: Model within the LF that shall be manipulated
          required: true
      requestBody:
        description: Serialized rdf-objects
        required: true
        content:
          application/x-turtle:
            schema:
              type: object
              example: <http://localhost:10080/linkedfactory/demofactory/machine1/sensor1> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://localhost:10080/linkedfactory/demofactory/machine1>.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

    get:
      tags:
        - end user
      summary: returns direct references from given item
      parameters:
        - in: query
          name: item
          schema:
            type: string
          description: Encoded uri for resource of interest
          required: true
        
      responses:
        '200':
          description: OK
          content:
            application/x-turtle:
              schema:
                type: string
                example: 
                  - <http://localhost:10080/linkedfactory/demofactory/machine1/sensor1> <http://www.w3.org/2000/01/rdf-schema#comment> "dengednden"@en .
                  - <http://localhost:10080/linkedfactory/demofactory/machine1/sensor1> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://localhost:10080/linkedfactory/demofactory/machine1> .
                  - <http://localhost:10080/linkedfactory/demofactory/machine1/sensor1> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://localhost:10080/linkedfactory/demofactory/machine1> .
